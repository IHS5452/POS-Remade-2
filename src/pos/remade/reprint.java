/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pos.remade;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import javax.swing.table.DefaultTableModel;
import static pos.remade.payment2.fn;
import static pos.remade.payment2.ln;

/**
 *
 * @author iansc
 */
public class reprint extends javax.swing.JFrame {

    /**
     * Creates new form reprint
     */
    public reprint() {
        initComponents();
    }
               static String s;


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Names"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table2);

        jButton1.setText("reprint");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       
                
                    DefaultTableModel model = (DefaultTableModel) table2.getModel();
payment2 pay = new payment2();
        try {
            BufferedWriter pw = new BufferedWriter(new FileWriter("names.csv", true));
                        BufferedReader in = new BufferedReader(new FileReader("names.csv"));

            String s;
            
            while ((s = in.readLine()) != null) {
                for (int i = 0; i < s.length(); i++) {
                    if (s.contains("")) {
                    Object[] row = {pay.names};
            
            
            model.addRow(row);
            model.fireTableDataChanged();
           model.fireTableStructureChanged();

            break;
                }
                }
            }
            
            
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
        }

                
                
                
                
                
                /*
        
         BufferedReader in2 = null;
                        payment2 pay = new payment2();

        try {
            BufferedReader in = null;
            DefaultTableModel model = (DefaultTableModel) table2.getModel();
            String st = "names.csv";
            in2 = new BufferedReader(new FileReader(st));
            String s;
            while ((s = in2.readLine()) != null) {
                for (int i = 0; i < s.length(); i++) {
                    if (s.contains("")) {
                        
                            BufferedWriter pw = new BufferedWriter(new FileWriter("names.csv", true));
                                                        String newrow = pay.names + "\n";
                            Object[] row = {newrow};
                            
                            model.addRow(row);
                            model.fireTableDataChanged();
                            break;
                        
                    }
                }
                
                
                try {
                BufferedReader in = null;
                
                payment2 pay = new payment2();
                String res = String.join(",", pay.names);
                DefaultTableModel model = (DefaultTableModel) table2.getModel();
                String st = "names.csv";
                in = new BufferedReader(new FileReader(st));
                while ((s = in.readLine()) != null) {
                for (int i = 0; i < res.length(); i++) {
                if (s.contains("")) {
                String[] b = s.split(",");
                String[] row = {b[0]};
                
                
                
                model.addRow(row);
                model.fireTableDataChanged();
                model.fireTableStructureChanged();
                break;
                }
                }
                }
                } catch (FileNotFoundException ex) {
                Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
                }
                */
                
          
                    
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            payment2 pay = new payment2();
            int row = table2.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) table2.getModel();
            
            Object obj1 = GetData(table2, row,0);
                        String path = String.valueOf(obj1) + ".txt";
            File file8 = new File(path);
            Desktop.getDesktop().print(file8);
            
            
            
            
// File permission problems are caught here.
/*
BufferedReader in = null;
try {
DefaultTableModel model = (DefaultTableModel) table2.getModel();
File foundit = null;
String st = "names.csv";
in = new BufferedReader(new FileReader(st));
String s;
int row = table2.getSelectedRow();
Object obj1 = GetData(table2, row,0);
final String obj2 = obj1.toString();
File dir = new File("POS-Remade");
FilenameFilter filter = new FilenameFilter() {
public boolean accept (File dir, String name) {
return name.startsWith(obj2);
}
};
String[] children = dir.list(filter);
if (children == null) {
System.out.println("Either dir does not exist or is not a directory");
} else {
for (int i=0; i< children.length; i++) {
String filename = children[i];
System.out.println(filename);
foundit = new File(filename);
}
}
while ((s = in.readLine()) != null) {
for (int i = 0; i < s.length(); i++) {
if (children.equals(obj2 + ".txt")) {
Desktop.getDesktop().print(foundit);
break;
}
}
}
// TODO add your handling code here:
}   catch (FileNotFoundException ex) {
Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
}   catch (IOException ex) {
Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
}
*/
// TODO add your handling code here:
/*
BufferedReader in = null;
try {
DefaultTableModel model = (DefaultTableModel) table2.getModel();
File foundit = null;
String st = "names.csv";
in = new BufferedReader(new FileReader(st));
String s;
int row = table2.getSelectedRow();
Object obj1 = GetData(table2, row,0);
final String obj2 = obj1.toString();
File dir = new File("POS-Remade");
FilenameFilter filter = new FilenameFilter() {
public boolean accept (File dir, String name) {
return name.startsWith(obj2);
}
};
String[] children = dir.list(filter);
if (children == null) {
System.out.println("Either dir does not exist or is not a directory");
} else {
for (int i=0; i< children.length; i++) {
String filename = children[i];
System.out.println(filename);
foundit = new File(filename);
}
}
while ((s = in.readLine()) != null) {
for (int i = 0; i < s.length(); i++) {
if (children.equals(obj2 + ".txt")) {
Desktop.getDesktop().print(foundit);
break;
}
}
}
// TODO add your handling code here:
}   catch (FileNotFoundException ex) {
Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
}   catch (IOException ex) {
Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
}
*/
// TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(reprint.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reprint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reprint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reprint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reprint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reprint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables

public Object GetData(JTable table2, int row_index, int col_index){
  return table2.getModel().getValueAt(row_index, col_index);
  }

class findfile extends Thread {
        public void run() {
   DefaultTableModel model = (DefaultTableModel) table2.getModel();
            Object obj1 = GetData(table2, 0,0);
            final String obj2 = obj1.toString();
            File dir = new File("POS-Remade");
      FilenameFilter filter = new FilenameFilter() {
         public boolean accept (File dir, String name) { 
            return name.startsWith(obj2);
         } 
      }; 
      String[] children = dir.list(filter);
      if (children == null) {
         System.out.println("Either dir does not exist or is not a directory"); 
      } else { 
         for (int i=0; i< children.length; i++) {
            String filename = children[i];
            System.out.println(filename);
         } 
      }
            
}
}






}



